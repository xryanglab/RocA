#!/usr/bin/env python
# -*- coding:UTF-8 -*-
'''
Author: Li Fajin
Date: 2021-02-22 09:42:09
LastEditors: Li Fajin
LastEditTime: 2021-02-22 10:55:20
Description: file content
'''


import sys
import numpy as np
import pandas as pd
from collections import defaultdict
from optparse import OptionParser

def create_parser_for_mean_density():
	'''argument parser'''
	usage="usage: python %prog -i file1.txt,file2.txt,file3.txt -o outprefix  "
	parser=OptionParser(usage=usage)
	parser.add_option("-i","--input",action="store",type="string",dest="metaDepth",
		help="ribosome density file on polypurine sequence motifs generated by RiboDensityAroundPolyPurineMotifs.py. multiple files are separated by comma.")
	parser.add_option("-o","--otput_prefix",action="store",type="string",dest="output_prefix",
		help="Prefix of output files.[required]")
	parser.add_option("--kmer",action="store",type="string",dest="kmer",help="kmer motifs to keep!")
	return parser

def parseKmer(kmer):
    kmers=pd.read_csv(kmer)
    kmers=kmers.values
    return kmers

def parseMetaReads(metaReads,kmer):
    metaReadsDict={}
    kmerDict={}
    kmers=parseKmer(kmer)
    with open(metaReads,'r') as f:
        for line in f:
            if line.strip()=="":
                continue
            trans=line.strip().split("\t")[0]
            motif=line.strip().split("\t")[1]
            start=line.strip().split("\t")[2]
            stop=line.strip().split("\t")[3]
            reads=np.array([i for i in line.strip().split("\t")[4:] if i.strip()!=""]).astype(np.float)
            key=trans+":"+motif+":"+str(start)+"-"+str(stop)
            metaReadsDict[key]=reads
            if motif in kmers:
                kmerDict[key]=reads
            else:
                pass
    print("There are " +str(len(metaReadsDict))+" motifs in "+str(metaReads))
    print("But, only "+str(len(kmerDict))+" motifs selected!")
    return metaReadsDict,kmerDict

def CalMeanReads(metaReadsFiles,outputPrefix,kmer):
    meanReadsDict=defaultdict(list)
    allkeysList=[]
    kmerkeysList=[]

    for fname in metaReadsFiles:
        tmpMetaReadsDict,tmpkmerDict=parseMetaReads(fname,kmer)
        allkeysList.append(set(tmpMetaReadsDict.keys()))
        kmerkeysList.append(set(tmpkmerDict.keys()))

    common_motifs=list(allkeysList[0].intersection(allkeysList[1]))
    common_kmers=list(kmerkeysList[0].intersection(kmerkeysList[1]))
    print("There are "+str(len(common_motifs))+" common motifs in two replicates!")
    print("But, there are only " +str(len(common_kmers))+" common kmers in two replicates!")
    for fname in metaReadsFiles:
        tmpMetaReadsDict,tmpkmerDict=parseMetaReads(fname,kmer)
        for motif in common_kmers:
            reads=tmpkmerDict[motif]
            meanReadsDict[motif].append(reads)

    for motif in meanReadsDict:
        meanReadsDict[motif]=sum(meanReadsDict[motif])/len(meanReadsDict[motif])

    fout=open(outputPrefix+"_mean.txt",'w')

    for motif in meanReadsDict:
        trans=motif.strip().split(":")[0]
        purine=motif.strip().split(":")[1]
        start=motif.strip().split(":")[2].strip().split("-")[0]
        stop=motif.strip().split(":")[2].strip().split("-")[1]
        fout.write("\t".join([trans,purine,str(start),str(stop)]))
        reads=meanReadsDict[motif]
        for i in range(len(reads)):
            fout.write("\t%s" %(str(reads[i])))
        fout.write("\n")


def main():
    parser=create_parser_for_mean_density()
    (options,args)=parser.parse_args()
    print("Start...")
    metaReadsFilesList=options.metaDepth.strip().split(",")
    CalMeanReads(metaReadsFilesList,options.output_prefix,options.kmer)
    print("Finish!")

if __name__=="__main__":
    main()